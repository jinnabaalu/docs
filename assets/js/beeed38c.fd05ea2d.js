"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2302],{4320:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"elasticsearch/index/Mappings","title":"Mappings","description":"\ud83e\udde0 What Are Mappings in Elasticsearch?","source":"@site/docs/elasticsearch/index/Mappings.md","sourceDirName":"elasticsearch/index","slug":"/elasticsearch/index/Mappings","permalink":"/oio/docs/elasticsearch/index/Mappings","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/elasticsearch/index/Mappings.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Mappings"},"sidebar":"tutorialSidebar","previous":{"title":"Alias","permalink":"/oio/docs/elasticsearch/index/Alias"},"next":{"title":"Full-Text Search vs Exact Match in Elasticsearch","permalink":"/oio/docs/elasticsearch/index/FulltextSearchVsExactMatch"}}');var r=i(4848),a=i(8453);const t={sidebar_position:3,title:"Mappings"},d="\ud83d\udd0d Understanding Elasticsearch Mappings \u2013 From Defaults to Precision",c={},l=[{value:"\ud83e\udde0 What Are Mappings in Elasticsearch?",id:"-what-are-mappings-in-elasticsearch",level:3},{value:"\ud83d\udcc2 Types of Mappings:",id:"-types-of-mappings",level:2},{value:"\u2705 <strong>Dynamic Mapping</strong>",id:"-dynamic-mapping",level:3},{value:"\ud83e\uddf1 <strong>Explicit Mapping</strong>",id:"-explicit-mapping",level:3},{value:"\ud83d\udea6 TL;DR Mapping Modes",id:"-tldr-mapping-modes",level:2},{value:"\ud83e\udd16 Dynamic Mapping Without Explicit Definitions",id:"-dynamic-mapping-without-explicit-definitions",level:2},{value:"\u270d\ufe0f Explicit Mapping + <code>dynamic: true</code>",id:"\ufe0f-explicit-mapping--dynamic-true",level:2},{value:"\ud83d\udfe1 Explicit Mapping + <code>dynamic: false</code>",id:"-explicit-mapping--dynamic-false",level:2},{value:"\u274c Explicit Mapping + <code>dynamic: strict</code>",id:"-explicit-mapping--dynamic-strict",level:2},{value:"\ud83e\uddfe Quick Reference Matrix",id:"-quick-reference-matrix",level:2},{value:"\ud83d\udca1 Final Thought",id:"-final-thought",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-understanding-elasticsearch-mappings--from-defaults-to-precision",children:"\ud83d\udd0d Understanding Elasticsearch Mappings \u2013 From Defaults to Precision"})}),"\n",(0,r.jsx)(n.h3,{id:"-what-are-mappings-in-elasticsearch",children:"\ud83e\udde0 What Are Mappings in Elasticsearch?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Mappings in Elasticsearch are like schemas in traditional databases"}),"\n",(0,r.jsx)(n.li,{children:"Without proper mappings, Elasticsearch has to guess the structure of your data"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-types-of-mappings",children:"\ud83d\udcc2 Types of Mappings:"}),"\n",(0,r.jsxs)(n.h3,{id:"-dynamic-mapping",children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Dynamic Mapping"})]}),"\n",(0,r.jsx)(n.p,{children:"Elasticsearch auto-creates fields as it sees them in data."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dynamic: true"})})," \u2192 Add new fields to the mapping automatically (default behavior)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dynamic: false"})})," \u2192 Ignore new fields silently \u2014 don\u2019t add to mapping, don\u2019t index them"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dynamic: strict"})})," \u2192 Throw an error if an unknown field appears (validates schema strictly)"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"-explicit-mapping",children:["\ud83e\uddf1 ",(0,r.jsx)(n.strong,{children:"Explicit Mapping"})]}),"\n",(0,r.jsx)(n.p,{children:"You manually define the field structure (types, rules, etc.)."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-tldr-mapping-modes",children:"\ud83d\udea6 TL;DR Mapping Modes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"explicit mapping"})," = You planned your schema."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dynamic: true"})," = Schema is flexible."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dynamic: false"})," = Schema is fixed; ignore surprises."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dynamic: strict"})," = Schema is law; reject surprises."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-dynamic-mapping-without-explicit-definitions",children:"\ud83e\udd16 Dynamic Mapping Without Explicit Definitions"}),"\n",(0,r.jsx)(n.p,{children:"If you just insert a document without creating an index or mapping:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'POST /users_dynamic_true/_doc/1\n{\n  "name": "Baalu",\n  "email": "baalu@infra.io",\n  "phone": "1234567890",\n  "date_of_birth": "1992-05-04"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Elasticsearch will:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create the index on the fly"}),"\n",(0,r.jsxs)(n.li,{children:["Infer types: ",(0,r.jsx)(n.code,{children:"name"})," \u2192 text, ",(0,r.jsx)(n.code,{children:"email"})," \u2192 text+keyword, ",(0,r.jsx)(n.code,{children:"phone"})," \u2192 text, ",(0,r.jsx)(n.code,{children:"date_of_birth"})," \u2192 date"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Totally dynamic"}),", no restrictions."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"\ufe0f-explicit-mapping--dynamic-true",children:["\u270d\ufe0f Explicit Mapping + ",(0,r.jsx)(n.code,{children:"dynamic: true"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'PUT /users_dynamic_true_add_mappings_dynamic\n{\n  "mappings": {\n    "dynamic": true,\n    "properties": {\n      "name": { "type": "text" },\n      "email": { "type": "keyword" }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'POST /users_dynamic_true_add_mappings_dynamic/_doc/1\n{\n  "name": "Baalu",\n  "email": "baalu@infra.io",\n  "phone": "1234567890",\n  "date_of_birth": "1992-05-04"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u27a1\ufe0f ",(0,r.jsx)(n.code,{children:"phone"})," and ",(0,r.jsx)(n.code,{children:"date_of_birth"})," will be auto-added to the mapping.\n\u2705 ",(0,r.jsx)(n.strong,{children:"Explicit + Dynamic"})," = controlled schema with room to grow."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"-explicit-mapping--dynamic-false",children:["\ud83d\udfe1 Explicit Mapping + ",(0,r.jsx)(n.code,{children:"dynamic: false"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'PUT /users_dynamic_false_ignores_new_fields\n{\n  "mappings": {\n    "dynamic": false,\n    "properties": {\n      "name": { "type": "text" },\n      "email": { "type": "keyword" }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'POST /users_dynamic_false_ignores_new_fields/_doc/1\n{\n  "name": "Baalu",\n  "email": "baalu@infra.io",\n  "phone": "1234567890",\n  "date_of_birth": "1992-05-04"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u27a1\ufe0f ",(0,r.jsx)(n.code,{children:"phone"})," and ",(0,r.jsx)(n.code,{children:"date_of_birth"})," are silently ignored (not indexed, not stored).\n\u2705 ",(0,r.jsx)(n.strong,{children:"Good for strict ingestion without throwing errors."})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"-explicit-mapping--dynamic-strict",children:["\u274c Explicit Mapping + ",(0,r.jsx)(n.code,{children:"dynamic: strict"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'PUT /users_dynamic_strics_error\n{\n  "mappings": {\n    "dynamic": "strict",\n    "properties": {\n      "name": { "type": "text" },\n      "email": { "type": "keyword" }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'POST /users_dynamic_strics_error/_doc/1\n{\n  "name": "Baalu",\n  "email": "baalu@infra.io",\n  "phone": "1234567890",\n  "date_of_birth": "1992-05-04"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u274c Error:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"reason": "mapping set to strict, dynamic introduction of [phone] is not allowed"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 Use this if you want to ",(0,r.jsx)(n.strong,{children:"enforce a locked schema"})," like a SQL table."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-quick-reference-matrix",children:"\ud83e\uddfe Quick Reference Matrix"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Setup"}),(0,r.jsx)(n.th,{children:"Auto-create fields?"}),(0,r.jsx)(n.th,{children:"Accept unknown fields?"}),(0,r.jsx)(n.th,{children:"Error on unknowns?"}),(0,r.jsx)(n.th,{children:"Indexed fields"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"No mapping (dynamic)"}),(0,r.jsx)(n.td,{children:"\u2705 Yes"}),(0,r.jsx)(n.td,{children:"\u2705 Yes"}),(0,r.jsx)(n.td,{children:"\u274c No"}),(0,r.jsx)(n.td,{children:"All"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Mapping + ",(0,r.jsx)(n.code,{children:"true"})]}),(0,r.jsx)(n.td,{children:"\u2705 Yes"}),(0,r.jsx)(n.td,{children:"\u2705 Yes"}),(0,r.jsx)(n.td,{children:"\u274c No"}),(0,r.jsx)(n.td,{children:"All"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Mapping + ",(0,r.jsx)(n.code,{children:"false"})]}),(0,r.jsx)(n.td,{children:"\u274c No"}),(0,r.jsx)(n.td,{children:"\u2705 Yes (ignored)"}),(0,r.jsx)(n.td,{children:"\u274c No"}),(0,r.jsx)(n.td,{children:"Only defined"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Mapping + ",(0,r.jsx)(n.code,{children:"strict"})]}),(0,r.jsx)(n.td,{children:"\u274c No"}),(0,r.jsx)(n.td,{children:"\u274c No"}),(0,r.jsx)(n.td,{children:"\u2705 Yes"}),(0,r.jsx)(n.td,{children:"Only defined"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-final-thought",children:"\ud83d\udca1 Final Thought"}),"\n",(0,r.jsxs)(n.p,{children:["If you care about schema validation or downstream search consistency, ",(0,r.jsx)(n.strong,{children:"don\u2019t rely on default dynamic mapping"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"dynamic: strict"})," when data integrity matters"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"false"})," when flexibility isn\u2019t needed"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"true"})," when bootstrapping or exploring"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["And yeah \u2014 never insert into ",(0,r.jsx)(n.code,{children:"dynamic: strict"})," unless you\u2019ve fully defined the fields. \ud83d\ude05"]}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var s=i(6540);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);