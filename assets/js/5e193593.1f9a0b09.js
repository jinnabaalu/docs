"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1603],{2798:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"elasticsearch/2019-09-17-Create-Indexes-and-Data","title":"2019-09-17-Create-Indexes-and-Data","description":"Preface","source":"@site/docs/elasticsearch/2019-09-17-Create-Indexes-and-Data.md","sourceDirName":"elasticsearch","slug":"/elasticsearch/2019-09-17-Create-Indexes-and-Data","permalink":"/docs/docs/elasticsearch/2019-09-17-Create-Indexes-and-Data","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/elasticsearch/2019-09-17-Create-Indexes-and-Data.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Elasticsearch Reindexing API","permalink":"/docs/docs/elasticsearch/2022-05-02-Reindexing-Guide"},"next":{"title":"2019-09-17-Elasticsearch-Slow-Query-Log-Conf","permalink":"/docs/docs/elasticsearch/2019-09-17-Elasticsearch-Slow-Query-Log-Conf"}}');var c=s(4848),l=s(8453);const r={sidebar_position:10},a=void 0,i={},o=[{value:"Preface",id:"preface",level:2},{value:"Frequently used commands",id:"frequently-used-commands",level:2},{value:"Create the Indice",id:"create-the-indice",level:3},{value:"Delete index",id:"delete-index",level:3},{value:"Get Index",id:"get-index",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"preface",children:"Preface"}),"\n",(0,c.jsxs)(n.p,{children:["This post assumes that you have some basic understanding of Docker, Docker Compose, and the key components used in the docker ecosystem. Get up to speed, with the ",(0,c.jsx)(n.a,{href:"https://docs.docker.com/get-started/#prepare-your-docker-environment",children:"Prepare Your Docker Eenvironment"})," section of Docker docs."]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["Install ",(0,c.jsx)(n.a,{href:"https://docs.docker.com/install/linux/docker-ce/ubuntu/",children:"Docker"})]}),"\n",(0,c.jsxs)(n.li,{children:["Install ",(0,c.jsx)(n.a,{href:"https://docs.docker.com/compose/install/",children:"docker-compose"})]}),"\n",(0,c.jsxs)(n.li,{children:["Install Elasticsearch or ",(0,c.jsx)(n.a,{href:"https://github.com/JinnaBalu/elasticsearch/blob/master/2019-08-29-Elasticsearch-Single-Node-using-Docker-Compose.md",children:"Run Elasticsearch container"})]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"frequently-used-commands",children:"Frequently used commands"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"Check the status of the Elasticsearch"}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsx)(n.p,{children:"Check the health status of the Elasticsearch"}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X GET "localhost:9200/_cat/health"\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Get the number of nodes of the Elasticsearch Cluster"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X GET "localhost:9200/_cat/nodes"\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Check with the shards with"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X GET "localhost:9200/_cat/shards"\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Get list of indices"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X GET "localhost:9200/_cat/indices?v"\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Get list of indices with specific column, we want to the column index, which will list the index names"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X GET "localhost:9200/_cat/indices?v&h=index"\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Get the list of indices sort by column"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X GET "localhost:9200/_cat/indices?v&s=docs.count:desc"\n\ncurl -X GET "localhost:9200/_cat/indices?v&s=docs.count:asc"\n\ncurl -X GET "localhost:9200/_cat/indices?v&s=index"\n\ncurl -X GET "localhost:9200/_cat/indices?v&s=docs.count:desc"\n\ncurl -X GET "localhost:9200/_cat/indices?v&s=docs.count:desc"\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Why the health status of the Elasticsearch is ",(0,c.jsx)(n.code,{children:"red"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Number of nodes in the cluster was three so there was no extra node to create the replica, and restore the unassigned indexes, So the health was turning to red. Created the index with settings property and set the number_of_replicas as 0."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"curl -XPUT 'localhost:9200/_settings' -H 'Content-Type: application/json' -d '\n{\n    \"index\" : {\n        \"number_of_replicas\" : 0\n    }\n}'\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'curl -X PUT "localhost:9200/_cluster/settings?pretty" -H \'Content-Type: application/json\' -d\'\n{\n  "transient": {\n    "cluster.routing.allocation.disk.watermark.low": "97%",\n    "cluster.routing.allocation.disk.watermark.high": "98%",\n    "cluster.routing.allocation.disk.watermark.flood_stage": "99%"\n  }\n}\n\'\n'})}),"\n",(0,c.jsx)(n.h3,{id:"create-the-indice",children:"Create the Indice"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"First, let's create a twitter user, and add some tweets"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -XPUT \'http://127.0.0.1:9200/twitter/user/kimchy\' -d \'{ "name" : "Shay Banon" }\'\n\ncurl -X PUT "localhost:9200/_cluster/settings?pretty" -H \'Content-Type: application/json\' -d\'\n{\n    "user": "kimchy",\n    "postDate": "2009-11-15T13:12:00",\n    "message": "Trying out Elasticsearch multinode, so far so good?"\n}\'\n\ncurl -XPUT \'http://127.0.0.1:9200/twitter/tweet/2\' -d \'\n{\n    "user": "kimchy",\n    "postDate": "2009-11-15T14:12:12",\n    "message": "Balu tweet, will it be indexed?"\n}\'\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X PUT "localhost:9200/_cluster/settings?pretty" -H \'Content-Type: application/json\' -d\'\n{\n  "persistent": {\n    "action.auto_create_index": "my-index-000001,index10,-index1*,+ind*" \n  }\n}\n\'\ncurl -X PUT "localhost:9200/_cluster/settings?pretty" -H \'Content-Type: application/json\' -d\'\n{\n  "persistent": {\n    "action.auto_create_index": "false" \n  }\n}\n\'\ncurl -X PUT "localhost:9200/_cluster/settings?pretty" -H \'Content-Type: application/json\' -d\'\n{\n  "persistent": {\n    "action.auto_create_index": "true" \n  }\n}\n\'\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Now, let's see if the information was added by GETting it:"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"curl -XGET 'http://127.0.0.1:9200/twitter/user/kimchy?pretty=true'\ncurl -XGET 'http://127.0.0.1:9200/twitter/tweet/1?pretty=true'\ncurl -XGET 'http://127.0.0.1:9200/twitter/tweet/2?pretty=true'\n"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Create customer entity with 1000 records"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X PUT "localhost:9200/customer?pretty" -H \'Content-Type: application/json\' -d\'\n{\n  "settings": {\n    "index": {\n      "number_of_shards": 5,  \n      "number_of_replicas": 0 \n    }\n  }\n}\n\'\n\n\n\nwhile ! curl -s "localhost:9200/_cat/indices?v" | grep green; do\n  sleep 0.1\ndone\n\nfor i in `seq 1 10`; do\n  curl -sXPUT "localhost:9200/customer/external/$i?pretty" -d "\n  {\n    \\"id\\": $i,\n    \\"name\\": \\"John Doe - $i\\"\n  }"\ndone\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Create student entity with 1000 records"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -sXPUT \'http://localhost:9200/student/?pretty\' -d \'{\n  "settings" : {\n      "index" : {\n          "number_of_shards" : 5,\n          "number_of_replicas" : 0\n      }\n  }\n}\'\n\nwhile ! curl -s "localhost:9200/_cat/indices?v" | grep green; do\n  sleep 0.1\ndone\n\nfor i in `seq 1 20`; do\n  curl -sXPUT "localhost:9200/student/external/$i?pretty" -d "\n  {\n    \\"number\\": $i,\n    \\"name\\": \\"Ram - $i\\"\n  }"\ndone\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Somemore examples"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X PUT "localhost:9200/twitter?pretty"\n\ncurl -X PUT "localhost:9200/school?pretty" -H \'Content-Type: application/json\' -d\'\n{\n    "settings" : {\n        "number_of_shards" : 3,\n        "number_of_replicas" : 2\n    },\n    "mappings" : {\n        "properties" : {\n            "name" : { "type" : "text" }\n        }\n    }\n}\n\'\n'})}),"\n",(0,c.jsx)(n.h3,{id:"delete-index",children:"Delete index"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X DELETE "localhost:9200/school?pretty"\n'})}),"\n",(0,c.jsx)(n.h3,{id:"get-index",children:"Get Index"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Get the mappings and setting with the following"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X GET "localhost:9200/school?pretty"\n\ncurl -X GET "localhost:9200/school/_mapping?pretty"\n\ncurl -X GET "localhost:9200/school/_settings?pretty"\n\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Checks if an index exists"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -I "localhost:9200/twitter?pretty"\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Get the count of Index"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -I "localhost:9200/twitter?pretty"\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Update index settings API"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X PUT "localhost:9200/school/_settings?pretty" -H \'Content-Type: application/json\' -d\'\n{\n    "index" : {\n        "number_of_replicas" : 2\n    }\n}\n\'\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Get the Statistics of the index"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'curl -X GET "localhost:9200/school/_stats?pretty"\n\ncurl -X GET "localhost:9200/_stats?pretty"\n\ncurl -X GET "localhost:9200/index1,index2/_stats?pretty"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const c={},l=t.createContext(c);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);