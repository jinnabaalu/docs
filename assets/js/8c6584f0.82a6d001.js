"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[665],{571:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"cert-manager/DeployCertManager","title":"Deploy cert-manager with wildcard","description":"Step1. Install cert-manager with helm chart","source":"@site/docs/cert-manager/DeployCertManager.md","sourceDirName":"cert-manager","slug":"/cert-manager/DeployCertManager","permalink":"/docs/docs/cert-manager/DeployCertManager","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cert-manager/DeployCertManager.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Cert Manager","permalink":"/docs/docs/category/cert-manager"},"next":{"title":"ValidateWildcard","permalink":"/docs/docs/cert-manager/ValidateWildcard"}}');var r=t(4848),s=t(8453);const o={sidebar_position:1},c="Deploy cert-manager with wildcard",d={},i=[{value:"Step1. Install cert-manager with helm chart",id:"step1-install-cert-manager-with-helm-chart",level:3},{value:"Step1.1 : Install the GoDaddy Webhook",id:"step11--install-the-godaddy-webhook",level:3},{value:"Step2. Create a GoDaddy API keys",id:"step2-create-a-godaddy-api-keys",level:3},{value:"Step2.1. Create a secret with the API key",id:"step21-create-a-secret-with-the-api-key",level:2},{value:"Step3. Create a clusterissuer certificates using the GoDaddy DNS-01 challenge",id:"step3-create-a-clusterissuer-certificates-using-the-godaddy-dns-01-challenge",level:2},{value:"Step4. Create a wildcard certificate",id:"step4-create-a-wildcard-certificate",level:2},{value:"Step5. Create ingress resources for each subdomain",id:"step5-create-ingress-resources-for-each-subdomain",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"deploy-cert-manager-with-wildcard",children:"Deploy cert-manager with wildcard"})}),"\n",(0,r.jsx)(n.h3,{id:"step1-install-cert-manager-with-helm-chart",children:"Step1. Install cert-manager with helm chart"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"helm repo add jetstack https://charts.jetstack.io --force-update\n\nhelm install \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.15.3 \\\n  --set crds.enabled=true\n"})}),"\n",(0,r.jsx)(n.p,{children:"*.kwixeesystem.in\n*.kwixeesit.com"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Commands used while creating and deleting the components"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Get all the services running under this namespace: ",(0,r.jsx)(n.code,{children:"kubectl get all -n cert-manager"})]}),"\n",(0,r.jsxs)(n.li,{children:["Delete all the components in the namespace: ",(0,r.jsx)(n.code,{children:"kubectl delete all --all -n cert-manager"})]}),"\n",(0,r.jsxs)(n.li,{children:["Get the release name: ",(0,r.jsx)(n.code,{children:"helm list -n cert-manager"})]}),"\n",(0,r.jsxs)(n.li,{children:["Delete releases : ",(0,r.jsx)(n.code,{children:"helm list -n cert-manager -q | xargs -n1 -r helm uninstall -n cert-manager"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"step11--install-the-godaddy-webhook",children:"Step1.1 : Install the GoDaddy Webhook"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Cloned the repo from ",(0,r.jsx)(n.a,{href:"https://github.com/snowdrop/godaddy-webhook",children:"https://github.com/snowdrop/godaddy-webhook"})]}),"\n",(0,r.jsx)(n.li,{children:"executed the following commands"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir cert-manager && cd godaddy-webhook\ngit clone https://github.com/snowdrop/godaddy-webhook.git\nexport DOMAIN=<yourdomain.com>\nhelm install -n cert-manager godaddy-webhook ./deploy/charts/godaddy-webhook --set groupName=$DOMAIN\n"})}),"\n",(0,r.jsx)(n.p,{children:"Activity @ devops server"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"root@devops:/home/devopsprod# cd /root/\nroot@devops:~# ls\nbackup  DB  devops  devops_new  files  snap  ssl\nroot@devops:~# mkdir cert-manager\nroot@devops:~# cd cert-manager/\nroot@devops:~/godaddy-webhook# git clone https://github.com/snowdrop/godaddy-webhook.git\nCloning into 'godaddy-webhook'...\nremote: Enumerating objects: 734, done.\nremote: Counting objects: 100% (272/272), done.\nremote: Compressing objects: 100% (93/93), done.\nremote: Total 734 (delta 166), reused 230 (delta 155), pack-reused 462 (from 1)\nReceiving objects: 100% (734/734), 238.07 KiB | 1.01 MiB/s, done.\nResolving deltas: 100% (375/375), done.\nroot@devops:~/cert-manager# cd godaddy-webhook/\nroot@devops:~/cert-manager/godaddy-webhook# ls\ncommon  deploy  Dockerfile  go.mod  go.sum  LICENSE  logging  main.go  main_test.go  Makefile  README.md  scripts  testdata\nroot@devops:~/cert-manager/godaddy-webhook# export DOMAIN=<yourdomain.com>\nhelm install -n cert-manager godaddy-webhook ./deploy/charts/godaddy-webhook --set groupName=$DOMAIN\nNAME: godaddy-webhook\nLAST DEPLOYED: Wed Sep  4 09:54:17 2024\nNAMESPACE: cert-manager\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n"})}),"\n",(0,r.jsx)(n.p,{children:"Take the backup of the deployed webhook for future reference, deployed godaddy-webhook-conf"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"helm template godaddy-webhook ./deploy/charts/godaddy-webhook --set groupName=$DOMAIN > deployed-godaddy-webhook-config.yaml\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step2-create-a-godaddy-api-keys",children:"Step2. Create a GoDaddy API keys"}),"\n",(0,r.jsxs)(n.p,{children:["Create the godaddy API keys from the godaddy console, ",(0,r.jsx)(n.a,{href:"https://developer.godaddy.com/keys",children:"https://developer.godaddy.com/keys"})]}),"\n",(0,r.jsx)(n.h2,{id:"step21-create-a-secret-with-the-api-key",children:"Step2.1. Create a secret with the API key"}),"\n",(0,r.jsx)(n.p,{children:"Created with the following secret name"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cat <<EOF > secret-<domain>.yml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: <domain>-godaddy-api-key\ntype: Opaque\nstringData:\n  token: <GODADDY_API_KEY:GODADDY_SECRET_KEY>\nEOF\n\nkubectl apply -f secret.yml -n cert-manager\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step3-create-a-clusterissuer-certificates-using-the-godaddy-dns-01-challenge",children:"Step3. Create a clusterissuer certificates using the GoDaddy DNS-01 challenge"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Use the staging acme challenge api for experiment, as the let's encrypt as the threshold for requests."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"cat <<EOF > clusterissuer.yml \nkind: ClusterIssuer\nmetadata:\n  name: kwixeesystem-letsencrypt-prod\nspec:\n  acme:\n    # https://acme-staging-v02.api.letsencrypt.org/directory\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: devopsnotifications@.com\n    privateKeySecretRef:\n      name: kwixeesystem-letsencrypt-production\n    solvers:\n    - selector:\n        dnsZones:\n        - 'kwixeesystem.in'\n      dns01:\n        webhook:\n          config:\n            apiKeySecretRef:\n              name: kwixeesystem-godaddy-api-key\n              key: token\n            production: true\n            ttl: 600\n          groupName: kwixeesystem.in\n          solverName: godaddy\nEOF\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Apply  ",(0,r.jsx)(n.code,{children:"kubectl apply -f certificate.yml"})]}),"\n",(0,r.jsx)(n.h2,{id:"step4-create-a-wildcard-certificate",children:"Step4. Create a wildcard certificate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"cat <<EOF > certificate.yml\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: wildcard-kwixeesystem-com\nspec:\n  secretName: wildcard-kwixeesystem-com-tls\n  renewBefore: 240h\n  dnsNames:\n  - '*.kwixeesystem.in'\n  issuerRef:\n    name: kwixeesystem-letsencrypt-prod\n    kind: ClusterIssuer\nEOF\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Apply ",(0,r.jsx)(n.code,{children:"kubectl apply -f certificate.yml -n cert-manager"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step5-create-ingress-resources-for-each-subdomain",children:"Step5. Create ingress resources for each subdomain"}),"\n",(0,r.jsx)(n.p,{children:"If you are on the same namespace, where the certificate is created then you can use it without restriction. but when you need it on a different server use the secret repeater to copy the tls certificate from the source namespace to the target namespace."}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example on how to apply the same secret to the application whose namespace is ",(0,r.jsx)(n.code,{children:"vbv-api"})]}),"\n",(0,r.jsx)(n.p,{children:"Use the cert replicator to generate new cert keys"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: cert-replication\n  namespace: cert-manager\nspec:\n  ttlSecondsAfterFinished: 300\n  template:\n    spec:\n      containers:\n      - name: cert-replication\n        image: bitnami/kubectl:latest\n        command:\n        - /bin/sh\n        - -c\n        - |\n          SECRET_NAME="wildcard-kwixeerdbms-com-tls"\n          SOURCE_NAMESPACE="cert-manager"\n          if [ -z "$TARGET_NAMESPACES" ]; then\n            echo "No target namespaces provided, exiting."\n            exit 1\n          fi\n          TARGET_NAMESPACES=($TARGET_NAMESPACES)\n          kubectl get secret $SECRET_NAME -n $SOURCE_NAMESPACE -o yaml > /tmp/secret.yaml\n          for NAMESPACE in "${TARGET_NAMESPACES[@]}"; do\n            # Delete the existing secret if it exists\n            kubectl delete secret $SECRET_NAME -n $NAMESPACE --ignore-not-found\n            # Apply the new secret\n            sed "s/namespace: $SOURCE_NAMESPACE/namespace: $NAMESPACE/" /tmp/secret.yaml > /tmp/secret-$NAMESPACE.yaml\n            kubectl apply -f /tmp/secret-$NAMESPACE.yaml\n          done\n        env:\n        - name: TARGET_NAMESPACES\n          value: "namespace1 namespace2"\n      restartPolicy: OnFailure\n\n\n# update TARGET_NAMESPACES values with space separated values\n# kubectl apply -f certificate-replicator.yaml\n'})}),"\n",(0,r.jsx)(n.p,{children:"Apply the ingress with the above secret."}),"\n",(0,r.jsx)(n.p,{children:"Example : testadminapi.domain.com"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:'cat <<EOF > testadminapi-ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: testadminapi-kwixeerdbms-com-ingress\n  namespace: vbv-api\n  annotations:\n    cert-manager.io/cluster-issuer: "letsencrypt-prod"\n    nginx.ingress.kubernetes.io/ssl-redirect: "true"\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - testadminapi.<yourdomain.com>\n    secretName: wildcard-kwixeerdbms-com-tls\n  rules:\n  - host: testadminapi.<yourdomain.com>\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: adminapi\n            port:\n              number: 5000\n\nEOF\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Cert-manager will continuously renew the certificates every 80 days, for every other namespace where the cert used need to be updated with the new ",(0,r.jsx)(n.code,{children:"tls.crt"})," and  ",(0,r.jsx)(n.code,{children:"tls.key"})," on renewal."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var a=t(6540);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);