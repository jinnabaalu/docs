"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8224],{5425:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"mongo/MongoDBSingleNodeClusterforDevs","title":"\u26a1 Run MongoDB Locally for Dev","description":"Quick guide to run MongoDB 8 in a container with persistence for dev use. Bind to all IPs, mount data, and you\'re good to go.","source":"@site/docs/mongo/MongoDBSingleNodeClusterforDevs.md","sourceDirName":"mongo","slug":"/RunMongoDBForDev","permalink":"/oio/docs/RunMongoDBForDev","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mongo/MongoDBSingleNodeClusterforDevs.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"\u26a1 Run MongoDB Locally for Dev","description":"Quick guide to run MongoDB 8 in a container with persistence for dev use. Bind to all IPs, mount data, and you\'re good to go.","slug":"/RunMongoDBForDev","image":"https://jinnabalu.com/oio/img/mongo/MongoDevContainer.png","keywords":["mongodb","dev setup","docker","docker-compose","mongo local","mongo 8","persistence"]},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udd10 Security Create Keyfile for MongoDB Security","permalink":"/oio/docs/CreateMongoSecurityKey"}}');var s=n(4848),i=n(8453);const r={sidebar_position:1,title:"\u26a1 Run MongoDB Locally for Dev",description:"Quick guide to run MongoDB 8 in a container with persistence for dev use. Bind to all IPs, mount data, and you're good to go.",slug:"/RunMongoDBForDev",image:"https://jinnabalu.com/oio/img/mongo/MongoDevContainer.png",keywords:["mongodb","dev setup","docker","docker-compose","mongo local","mongo 8","persistence"]},a="\u26a1 Run MongoDB Locally for Dev",c={},d=[{value:"\ud83e\uddfe docker-compose.yml",id:"-docker-composeyml",level:2},{value:"\ud83d\udce5 Option 1: Download from GitHub",id:"-option-1-download-from-github",level:3},{value:"\u270d\ufe0f Option 2: Create the file manually",id:"\ufe0f-option-2-create-the-file-manually",level:3},{value:"Want to see what you just ran? Here\u2019s a quick recap:",id:"want-to-see-what-you-just-ran-heres-a-quick-recap",level:2},{value:"\ud83d\ude80 Run It",id:"-run-it",level:2},{value:"Then check that it&#39;s up:",id:"then-check-that-its-up",level:3},{value:"\ud83d\udcc2 What You Get",id:"-what-you-get",level:2},{value:"\ud83e\uddea Connect &amp; Run Basic Mongo Queries",id:"-connect--run-basic-mongo-queries",level:2},{value:"Option A: Use the shell inside the container",id:"option-a-use-the-shell-inside-the-container",level:3},{value:"Run some basic stuff:",id:"run-some-basic-stuff",level:3}];function l(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"-run-mongodb-locally-for-dev",children:"\u26a1 Run MongoDB Locally for Dev"})}),"\n",(0,s.jsxs)(o.p,{children:["This guide gives you a dead-simple way to run MongoDB 8 in a container ",(0,s.jsx)(o.strong,{children:"with persistent storage"})," \u2014 perfect for local dev work, prototyping, or quick testing."]}),"\n",(0,s.jsx)(o.hr,{}),"\n",(0,s.jsx)(o.h2,{id:"-docker-composeyml",children:"\ud83e\uddfe docker-compose.yml"}),"\n",(0,s.jsx)(o.p,{children:"You\u2019ve got two options \u2014 grab it from GitHub or drop it into a file yourself."}),"\n",(0,s.jsx)(o.h3,{id:"-option-1-download-from-github",children:"\ud83d\udce5 Option 1: Download from GitHub"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:"download"}),"\n"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{children:"wget https://raw.githubusercontent.com/jinnabaalu/MongoOperations/refs/heads/main/single-node/developer/docker-compose.yml\n"})}),"\n",(0,s.jsx)(o.h3,{id:"\ufe0f-option-2-create-the-file-manually",children:"\u270d\ufe0f Option 2: Create the file manually"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-yaml",children:'services:\n  mongodb:\n    image: mongo:8\n    container_name: mongodb\n    hostname: mongodb\n    restart: unless-stopped\n    environment:\n      - MONGO_INITDB_DATABASE=oiodb\n    volumes:\n      - ./tmp/mongo/data:/data/db\n    ports:\n      - 27017:27017\n    command: ["mongod", "--bind_ip_all"]\n'})}),"\n",(0,s.jsx)(o.h1,{id:"-tldr-flow",children:"\ud83d\udd01 TL;DR Flow"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:'docker compose up -d\ndocker exec -it mongodb mongosh\nuse oiodb\ndb.test.insertOne({ hello: "world" })\ndb.test.find()\n'})}),"\n",(0,s.jsx)(o.p,{children:"Boom. MongoDB is working, storing, and querying like a champ. \ud83e\udde8"}),"\n",(0,s.jsx)(o.h2,{id:"want-to-see-what-you-just-ran-heres-a-quick-recap",children:"Want to see what you just ran? Here\u2019s a quick recap:"}),"\n",(0,s.jsx)(o.h2,{id:"-run-it",children:"\ud83d\ude80 Run It"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:"docker compose up -d\n"})}),"\n",(0,s.jsx)(o.h3,{id:"then-check-that-its-up",children:"Then check that it's up:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:'docker ps\ndocker logs -f mongodb | grep "Listening on"\n'})}),"\n",(0,s.jsx)(o.h2,{id:"-what-you-get",children:"\ud83d\udcc2 What You Get"}),"\n",(0,s.jsx)(o.p,{children:"MongoDB 8, running with persistence (./tmp/mongo/data)"}),"\n",(0,s.jsx)(o.p,{children:"Port 27017 exposed to your host \u2014 ready for Compass or app connections"}),"\n",(0,s.jsx)(o.p,{children:"No auth, no cluster \u2014 just raw MongoDB for dev speed"}),"\n",(0,s.jsx)(o.h2,{id:"-connect--run-basic-mongo-queries",children:"\ud83e\uddea Connect & Run Basic Mongo Queries"}),"\n",(0,s.jsx)(o.h3,{id:"option-a-use-the-shell-inside-the-container",children:"Option A: Use the shell inside the container"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:"docker exec -it mongodb mongosh\n"})}),"\n",(0,s.jsx)(o.h3,{id:"run-some-basic-stuff",children:"Run some basic stuff:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:'// List databases\nshow dbs\n\n// Switch/create your dev DB\nuse oiodb\n\n// Create a collection and insert a doc\ndb.users.insertOne({ name: "Baalu", role: "Infra Architect" })\n\n// Read it back\ndb.users.find()\n\n// Count docs\ndb.users.countDocuments()\n'})}),"\n",(0,s.jsx)(o.h1,{id:"others-options",children:"Others Options"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:"Use Mongo Compass or GUI"}),"\n",(0,s.jsxs)(o.li,{children:["Run your own container for GUI ",(0,s.jsx)(o.a,{href:"mongo-express",children:"mongo-express"})]}),"\n"]})]})}function u(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>a});var t=n(6540);const s={},i=t.createContext(s);function r(e){const o=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:o},e.children)}}}]);